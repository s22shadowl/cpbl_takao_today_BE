# .github/workflows/ci.yml

name: Python CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydb
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies for Playwright
        run: sudo apt-get update && sudo apt-get install -y xvfb

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install tools for CI, including the new audit tool
          pip install ruff pytest requests pip-audit

      - name: Install Playwright Browsers
        run: |
          playwright install chromium --with-deps

      - name: Scan for vulnerabilities
        run: |
          # Scan dependencies listed in requirements.txt for known vulnerabilities
          pip-audit -r requirements.txt

      - name: Lint and Format Check
        run: |
          ruff check .

      - name: Run Unit and Integration Tests
        env:
          DATABASE_URL: postgresql://myuser:mypassword@localhost:5432/mydb
          DRAMATIQ_BROKER_URL: redis://localhost:6379/0
          API_KEY: test-ci-key
          TARGET_TEAM_NAME: "台鋼雄鷹"
          TARGET_TEAMS: '["台鋼雄鷹"]'
          TARGET_PLAYER_NAMES: '["王柏融","魔鷹","吳念庭"]'
        run: |
          # 執行除了 e2e 目錄以外的所有測試
          pytest -m "not e2e and not canary"

      - name: Run E2E Tests
        env:
          DATABASE_URL: postgresql://myuser:mypassword@localhost:5432/mydb
          DRAMATIQ_BROKER_URL: redis://localhost:6379/0
          API_KEY: test-ci-key
          PORT: 8000
          # 僅在此步驟啟用 E2E 測試模式
          E2E_TEST_MODE: "true"
          TARGET_TEAM_NAME: "台鋼雄鷹"
          TARGET_TEAMS: '["台鋼雄鷹"]'
          TARGET_PLAYER_NAMES: '["王柏融","魔鷹","吳念庭"]'
        run: |
          # 啟動 Web 服務
          echo "Starting Web server..."
          uvicorn app.main:app --host 0.0.0.0 --port $PORT > web.log 2>&1 &
          # 等待 Web 服務就緒
          python - <<'EOF'
          import os, time, requests
          port = os.getenv("PORT", "8000")
          url = f"http://localhost:{port}/docs"
          for i in range(20):
              try:
                  if requests.get(url).status_code == 200:
                      print("Web Server is up!")
                      exit(0)
              except requests.ConnectionError: pass
              print(f"Waiting for Web server... ({i+1}/20)")
              time.sleep(1)
          print("Web Server did not start in time."); exit(1)
          EOF

          # 【修改】使用 xvfb-run 啟動 Worker 服務
          echo "Starting Worker service with xvfb..."
          xvfb-run dramatiq app.tasks:redis_broker app.tasks --processes 2 > worker.log 2>&1 &
          sleep 5
          echo "Worker service started."

          # 僅執行 e2e 目錄下的測試
          pytest tests/e2e

      - name: Display logs on failure
        if: failure()
        run: |
          echo "--- Web Server Logs ---"
          cat web.log || echo "web.log not found"
          echo "\n--- Worker Logs ---"
          cat worker.log || echo "worker.log not found"

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: build-and-test # 確保在 build-and-test 成功後才執行
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # 僅在推送至 main 分支時執行

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set Fly.io Secrets Dynamically
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          # 將所有 GitHub Secrets 作為一個 JSON 字串傳入此步驟
          SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          # 使用 jq 工具解析 JSON，篩選出所有以 'PROD_' 開頭的 secrets，
          # 移除前綴 'PROD_'，並將其格式化為 'KEY=VALUE' 的形式，
          # 最後透過 xargs 將它們一次性傳遞給 fly secrets set 指令。
          echo "$SECRETS_JSON" | jq -r 'to_entries[] | select(.key | startswith("PROD_")) | "\(.key | ltrimstr("PROD_"))=\(.value)"' | \
          xargs fly secrets set --app cpbl-takao-today-be

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: fly deploy --app cpbl-takao-today-be
