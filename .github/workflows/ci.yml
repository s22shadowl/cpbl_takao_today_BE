# .github/workflows/ci.yml

name: Python CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # [優化] 將共通環境變數提升至 job 層級，減少重複
    env:
      DATABASE_URL: postgresql://myuser:mypassword@localhost:5432/mydb
      DRAMATIQ_BROKER_URL: redis://localhost:6379/0
      REDIS_CACHE_URL: redis://localhost:6379/1
      API_KEY: test-ci-key
      TARGET_TEAM_NAME: "台鋼雄鷹"
      TARGET_TEAMS: '["台鋼雄鷹"]'
      TARGET_PLAYER_NAMES: '["王柏融","魔鷹","吳念庭"]'
      ALLOWED_ORIGINS: '["*"]'

    services:
      postgres:
        image: postgres:15
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydb
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2

      - name: Verify Poetry version
        run: poetry --version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y xvfb redis-tools

      - name: Install dependencies
        run: poetry install --no-root

      - name: Install Playwright Browsers
        run: |
          poetry run playwright install chromium --with-deps

      - name: Scan for vulnerabilities
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          poetry run pip-audit -r requirements.txt

      - name: Lint and Format Check
        run: |
          poetry run ruff check .

      - name: Run Unit and Integration Tests
        run: |
          poetry run pytest -m "not e2e and not canary"

      - name: Run E2E Tests
        env:
          PORT: 8000
          E2E_TEST_MODE: "true"
        run: |
          echo "Starting Web server..."
          poetry run uvicorn app.main:app --host 0.0.0.0 --port $PORT > web.log 2>&1 &

          echo "Waiting for Web server to be ready..."
          for i in {1..20}; do
            if curl -sf -o /dev/null http://localhost:$PORT/docs; then
              echo "Web Server is up!"
              SERVER_IS_UP=true
              break
            fi
            echo "Waiting for Web server... ($i/20)"
            sleep 1
          done

          if [ -z "$SERVER_IS_UP" ]; then
            echo "Web Server did not start in time."
            exit 1
          fi

          echo "Starting Worker service with xvfb..."
          poetry run xvfb-run dramatiq app.broker_setup:broker app.workers --processes 2 > worker.log 2>&1 &

          # [修正] 使用 redis-cli 輪詢來取代 sleep，確保 worker 已就緒
          echo "Waiting for Worker service to be ready..."
          for i in {1..20}; do
            if redis-cli -h localhost -p 6379 GET worker_ready | grep -q "1"; then
              echo "Worker service is up!"
              WORKER_IS_UP=true
              break
            fi
            echo "Waiting for Worker service... ($i/20)"
            sleep 1
          done

          if [ -z "$WORKER_IS_UP" ]; then
            echo "Worker service did not start in time."
            exit 1
          fi

          poetry run pytest tests/e2e

      - name: Display logs on failure
        if: failure()
        run: |
          echo "--- Web Server Logs ---"
          cat web.log || echo "web.log not found"
          echo "\n--- Worker Logs ---"
          cat worker.log || echo "worker.log not found"

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set Fly.io Secrets Dynamically
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          SECRETS_TO_SET=$(echo "$SECRETS_JSON" | jq -r 'to_entries[] | select(.key | startswith("PROD_")) | "\(.key | ltrimstr("PROD_"))=\(.value)"')

          if [[ -n "$SECRETS_TO_SET" ]]; then
            echo "Staging secrets on Fly.io..."
            echo "$SECRETS_TO_SET" | xargs flyctl secrets set --stage --app cpbl-takao-today-be
          else
            echo "No secrets with PROD_ prefix found to set."
          fi

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --app cpbl-takao-today-be
